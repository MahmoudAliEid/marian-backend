

const { PrismaClient } = require('@prisma/client');
  const createProduct = async (req, res) => {
  const { name, description, userId, categoryId } = req.body;
  console.log("body form product", req.body);
  console.log("files uploaded:", req.files);

  if (!name || !description) {
    return res.status(400).json({ error: 'Name and description are required' });
  }
  
  const files = req.files;
  if (!files || files.length === 0) {
    return res.status(400).json({ error: 'No images uploaded' });
  }

  try {
    // Extract image URLs from uploaded files
    const imageUrls = files.map(file => file.path);
    
    const newProduct = await prisma.product.create({
      data: { 
        name, 
        description, 
        images: imageUrls,
        userId: userId || null,
        categoryId: categoryId || null
      },
      include: { 
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        category: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });

    res.status(201).json({ 
      message: 'Product created successfully', 
      product: newProduct 
    });
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ error: 'Error creating product', details: error.message });
  }
  }
  
  const prisma = new PrismaClient();

 const getProductById = async (req, res) => {
  const { id } = req.params;
  try {
    const product = await prisma.product.findUnique({
      where: { id },
      include: { 
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
    });
    if (!product) {
      return res.status(404).json({ error: 'Product not found' });
    }
    res.status(200).json(product);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ error: 'Error fetching product' });
  }
  }

  const getAllProducts = async (req, res) => {
  try {
    const products = await prisma.product.findMany({
      include: { 
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        category: {
          select: {
            id: true,
            name: true
          }
        }
      },
    });
    res.status(200).json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ error: 'Error fetching products' });
  }
  }


  const updateProduct =   async  (req, res) => {
  const { id } = req.params;
  const { name, description } = req.body;
  const files = req.files;
 
  if (!name || !description) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  try {
    const updatedProduct = await prisma.product.update({
      where: { id: parseInt(id) },
      data: {
        name,
        description,
        images: {
          create: files.map(file => ({ url: file.path })),
        },
      },
      include: { images: true },
    });
    res.status(200).json({ message: 'Product updated successfully', product: updatedProduct });
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ error: 'Error updating product' });
  }
}

const deleteProduct = async (req, res) => {
  const { id } = req.params;
  try {
    await prisma.product.delete({
      where: { id: parseInt(id) },
    });
    res.status(200).json({ message: 'Product deleted successfully' });
  } catch (error) {
    console.error('Error deleting product:', error);
    res.status(500).json({ error: 'Error deleting product' });
  }
}

module.exports = {
  getProductById,
  getAllProducts,
  createProduct,
  updateProduct,
  deleteProduct,
};
         
